openapi: 3.0.0
info:
  title: WetroCloud
  version: 1.0.0
servers:
  - url: https://api.wetrocloud.com
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization

security:
  - ApiKeyAuth: []

paths:
  /v1/create/:
    post:
      tags:
        - default
      summary: Create Collection
      description: >-
        This endpoint allows you to create a new collection_id.


        #### Request Body


        - No request body parameters required.
            

        #### Response


        The response will be a JSON object with the following properties:


        - `collection_id` (string): The ID of the created item.
            
        - `success` (boolean): Indicates whether the item creation was
        successful.
      requestBody:
        content: {}
      responses:
        '201':
          description: Created
          headers:
            Date:
              schema:
                type: string
                example: Mon, 25 Nov 2024 15:01:19 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '71'
            Connection:
              schema:
                type: string
                example: keep-alive
            Server:
              schema:
                type: string
                example: nginx/1.27.2
            Allow:
              schema:
                type: string
                example: POST, OPTIONS
            X-Frame-Options:
              schema:
                type: string
                example: DENY
            Vary:
              schema:
                type: string
                example: origin
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            Referrer-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
          content:
            application/json:
              schema:
                type: object
              example:
                collection_id: 72b52a94-9dba-40eb-8018-dc425d173d00
                success: true
        '401':
          description: Unauthorized
          headers:
            Date:
              schema:
                type: string
                example: Mon, 25 Nov 2024 15:34:21 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '27'
            Connection:
              schema:
                type: string
                example: keep-alive
            Server:
              schema:
                type: string
                example: nginx/1.27.2
            WWW-Authenticate:
              schema:
                type: string
                example: Token
            Allow:
              schema:
                type: string
                example: POST, OPTIONS
            X-Frame-Options:
              schema:
                type: string
                example: DENY
            Vary:
              schema:
                type: string
                example: origin
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            Referrer-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
          content:
            application/json:
              schema:
                type: object
              example:
                detail: Invalid token.

  /v1/collection/:
    get:
      tags:
        - default
      summary: List all Collections
      description: >-
        This endpoint allows you to list all your existing collections.

        <Note>
        This list has a pagination of up to <b>20</b> items per request. `Next` and `Previous` urls will be provided on every response
        </Note>

        #### Request Body

        - No request body parameters required.
            

        #### Response


        The response will be a JSON object with the following properties:


        - `count` (number): Total number of collections.
        - `next` (string): URL for the next pagination item.
        - `previous` (string): URL for the previous pagination item.
        - `results` (list): A list of all available collections.
 
      requestBody:
        content: {}
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Mon, 25 Nov 2024 15:01:19 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '71'
            Connection:
              schema:
                type: string
                example: keep-alive
            Server:
              schema:
                type: string
                example: nginx/1.27.2
            Allow:
              schema:
                type: string
                example: POST, OPTIONS
            X-Frame-Options:
              schema:
                type: string
                example: DENY
            Vary:
              schema:
                type: string
                example: origin
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            Referrer-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
          content:
            application/json:
              schema:
                type: object
              example:
                count: 5
                next: null
                previous: null
                results: [
                  {
                              "collection_id": "175af194-2784-4090-bcec-cefe56ddd222",
                              "created_at": "2024-12-07T12:23:03.196238Z"
                          },
                          {
                              "collection_id": "4fdb1296-adc8-463c-834d-b76c3831e1f0",
                              "created_at": "2024-11-24T14:59:24.047852Z"
                          },
                          {
                              "collection_id": "0873619c-bf1c-41e0-9e92-f14ebc9d6a4a",
                              "created_at": "2024-11-24T14:36:16.759668Z"
                          },
                          {
                              "collection_id": "3235da7c-bff9-4a55-8478-ffa0fa1172d8",
                              "created_at": "2024-11-17T18:58:41.199564Z"
                          },
                          {
                              "collection_id": "da43a055-d064-4d38-8feb-783ad2b3fce2",
                              "created_at": "2024-11-16T13:10:18.679598Z"
                          }
                    ]
        '401':
          description: Unauthorized
          headers:
            Date:
              schema:
                type: string
                example: Mon, 25 Nov 2024 15:34:21 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '27'
            Connection:
              schema:
                type: string
                example: keep-alive
            Server:
              schema:
                type: string
                example: nginx/1.27.2
            WWW-Authenticate:
              schema:
                type: string
                example: Token
            Allow:
              schema:
                type: string
                example: POST, OPTIONS
            X-Frame-Options:
              schema:
                type: string
                example: DENY
            Vary:
              schema:
                type: string
                example: origin
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            Referrer-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
          content:
            application/json:
              schema:
                type: object
              example:
                detail: Invalid token.

  /v1/insert/:
    post:
      tags:
        - default
      summary: Insert Resource
      description: >-

        This endpoint allows you to add data to a collection using an HTTP POST
        request.


        #### Request Body


        - `collection_id` (text): The ID of the collection to which the data
        will be added.
            
        - `resource` (text): The resource to be added to the collection.
            
        - `type` (text): The type of the resource being added.
            

        #### Response


        Upon successful addition, the response will include:


        - `success` (boolean): Indicates whether the operation was successful.
            
        - `tokens` (number): The number of tokens generated.
            
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                collection_id:
                  type: string
                  example: '{{collection_id}}'
                resource:
                  type: string
                  example: https://en.wikipedia.org/wiki/Elizabeth_II
                type:
                  type: string
                  example: web
      responses:
        '202':
          description: Accepted
          headers:
            Date:
              schema:
                type: string
                example: Mon, 25 Nov 2024 15:09:31 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '31'
            Connection:
              schema:
                type: string
                example: keep-alive
            Server:
              schema:
                type: string
                example: nginx/1.27.2
            Allow:
              schema:
                type: string
                example: POST, OPTIONS
            X-Frame-Options:
              schema:
                type: string
                example: DENY
            Vary:
              schema:
                type: string
                example: origin
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            Referrer-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
                tokens: 93718
        '401':
          description: Unauthorized
          headers:
            Date:
              schema:
                type: string
                example: Mon, 25 Nov 2024 15:08:56 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '27'
            Connection:
              schema:
                type: string
                example: keep-alive
            Server:
              schema:
                type: string
                example: nginx/1.27.2
            WWW-Authenticate:
              schema:
                type: string
                example: Token
            Allow:
              schema:
                type: string
                example: POST, OPTIONS
            X-Frame-Options:
              schema:
                type: string
                example: DENY
            Vary:
              schema:
                type: string
                example: origin
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            Referrer-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
          content:
            application/json:
              schema:
                type: object
              example:
                detail: Invalid token.
  /v1/query/:
    post:
      tags:
        - default
      summary: Query Resource
      description: >-
        This endpoint allows the user to make an HTTP POST request to submit a
        query to the specified collection.


        ### Request Body


        - `collection_id` (text): The ID of the collection to which the query is
        being submitted.
            
        - `request_query` (text): The query being submitted to the collection.
            
        - `json_schema` (text): The JSON schema for the query response.
            
        - `json_schema_rules` (text): Rules for the JSON schema.
            

        ### Response


        The response for this request is a JSON schema with the following
        structure:

        - `response` (object): The JSON schema for the query response.
            
        - `tokens` (number): The number of tokens.
            
        - `success` (boolean): Indicates whether the request was successful.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                collection_id:
                  type: string
                  example: '{{collection_id}}'
                request_query:
                  type: string
                  example: >-
                    What were the major milestones during Queen Elizabeth II's
                    reign?
                json_schema:
                  type: string
                  example: |
                    {
                      "type": "object",
                      "properties": {
                        "question": {
                          "type": "string",
                          "description": "The question being asked."
                        },
                        "milestones": {
                          "type": "array",
                          "description": "A list of significant milestones during Queen Elizabeth II's reign.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "year": {
                                "type": "string",
                                "description": "The year when the milestone occurred."
                              },
                              "event": {
                                "type": "string",
                                "description": "A brief description of the milestone or event."
                              }
                            },
                            "required": ["year", "event"]
                          }
                        }
                      },
                      "required": ["question", "milestones"]
                    }
                json_schema_rules:
                  type: string
                  example: |
                    [
                      "Ask for specific milestones or events during Queen Elizabeth II's reign, including years and brief descriptions.",
                      "Ensure the year and event description for each milestone is accurate and clear.",
                      "Limit event descriptions to concise, relevant information without excessive detail.",
                      "Focus on significant events from Queen Elizabeth II's reign, starting from 1952 onward."
                    ]
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Mon, 25 Nov 2024 15:44:06 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '641'
            Connection:
              schema:
                type: string
                example: keep-alive
            Server:
              schema:
                type: string
                example: nginx/1.27.2
            Allow:
              schema:
                type: string
                example: POST, OPTIONS
            X-Frame-Options:
              schema:
                type: string
                example: DENY
            Vary:
              schema:
                type: string
                example: origin
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            Referrer-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
          content:
            application/json:
              schema:
                type: object
              examples:
                Free Text Response:
                  summary: Free Text Response
                  value:
                    response: >-
                      Queen Elizabeth II was the monarch of the United Kingdom
                      and other Commonwealth realms. She served as the Supreme
                      Governor of the Church of England and was a member of the
                      Church of Scotland. Her reign included significant events
                      such as her first state visit to China and her address to
                      a joint meeting of the United States Congress. Elizabeth
                      was known for her involvement in various state matters and
                      her response to public scrutiny regarding the royal
                      family's affairs. She was also noted for her wealth, which
                      included state assets, and her efforts to modernize the
                      monarchy during her reign.
                    tokens: 5224
                    success: true
                Structured Output:
                  summary: Structured Output
                  value:
                    response:
                      type: object
                      properties:
                        question: >-
                          What are some significant milestones or events during
                          Queen Elizabeth II's reign?
                        milestones:
                          - year: '1952'
                            event: Queen Elizabeth II ascended to the throne.
                          - year: '1977'
                            event: >-
                              Silver Jubilee celebrated, marking 25 years of her
                              reign.
                          - year: '2002'
                            event: >-
                              Golden Jubilee celebrated, marking 50 years of her
                              reign.
                          - year: '2007'
                            event: >-
                              First British monarch to celebrate a diamond
                              wedding anniversary.
                          - year: '2012'
                            event: >-
                              Diamond Jubilee celebrated, marking 60 years of
                              her reign.
                          - year: '2015'
                            event: Became the longest-reigning British monarch.
                          - year: '2022'
                            event: >-
                              Platinum Jubilee celebrated, marking 70 years of
                              her reign.
                    tokens: 6858
                    success: true
        '400':
          description: Bad Request
          headers:
            Date:
              schema:
                type: string
                example: Mon, 25 Nov 2024 16:41:15 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '90'
            Connection:
              schema:
                type: string
                example: keep-alive
            Server:
              schema:
                type: string
                example: nginx/1.27.2
            Allow:
              schema:
                type: string
                example: POST, OPTIONS
            X-Frame-Options:
              schema:
                type: string
                example: DENY
            Vary:
              schema:
                type: string
                example: origin
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            Referrer-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
          content:
            application/json:
              schema:
                type: object
              example:
                error: >-
                  Error getting Json schema. Ensure the json_schema field is a
                  valid Json schema
        '401':
          description: Unauthorized
          headers:
            Date:
              schema:
                type: string
                example: Mon, 25 Nov 2024 16:51:23 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '27'
            Connection:
              schema:
                type: string
                example: keep-alive
            Server:
              schema:
                type: string
                example: nginx/1.27.2
            WWW-Authenticate:
              schema:
                type: string
                example: Token
            Allow:
              schema:
                type: string
                example: POST, OPTIONS
            X-Frame-Options:
              schema:
                type: string
                example: DENY
            Vary:
              schema:
                type: string
                example: origin
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            Referrer-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
          content:
            application/json:
              schema:
                type: object
              example:
                detail: Invalid token.
  /v1/category/:
    post:
      tags:
        - default
      summary: Categorize Resource
      description: >-


        This endpoint allows you to create a new category by providing the
        necessary details in the request body.


        #### Request Body


        - `resource` (text): Description of the resource.
            
        - `type` (text): Type of the category.
            
        - `json_schema` (text): JSON schema for the category.
            
        - `json_schema_rules` (text): Rules for the JSON schema.
            

        #### Response


        The response is a JSON object with the following properties:


        - `label`: The label of the response.
            
        - `tokens`: The number of tokens.
            
        - `success`: Indicates the success status of the request.
            
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                resource:
                  type: string
                  example: 'match review: John Cena vs. The Rock.'
                type:
                  type: string
                  example: text
                json_schema:
                  type: string
                  example: '{"label":"string" }'
                json_schema_rules:
                  type: string
                  example: >
                    ["never go out of context", "Categorize this data based on
                    their types like text, youtube, urls, football, coding,
                    entertainment, basketball, wrestling, information, etc.",
                    "Always return json", "Always return one word answers"]
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Mon, 25 Nov 2024 16:29:51 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '63'
            Connection:
              schema:
                type: string
                example: keep-alive
            Server:
              schema:
                type: string
                example: nginx/1.27.2
            Allow:
              schema:
                type: string
                example: POST, OPTIONS
            X-Frame-Options:
              schema:
                type: string
                example: DENY
            Vary:
              schema:
                type: string
                example: origin
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            Referrer-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
          content:
            application/json:
              schema:
                type: object
              example:
                response:
                  label: wrestling
                tokens: 1746
                success: true
        '400':
          description: Bad Request
          headers:
            Date:
              schema:
                type: string
                example: Mon, 25 Nov 2024 16:43:29 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '45'
            Connection:
              schema:
                type: string
                example: keep-alive
            Server:
              schema:
                type: string
                example: nginx/1.27.2
            Allow:
              schema:
                type: string
                example: POST, OPTIONS
            X-Frame-Options:
              schema:
                type: string
                example: DENY
            Vary:
              schema:
                type: string
                example: origin
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            Referrer-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
          content:
            application/json:
              schema:
                type: object
              example:
                json_schema:
                  - Value must be valid JSON.
        '401':
          description: Unauthorized
          headers:
            Date:
              schema:
                type: string
                example: Mon, 25 Nov 2024 16:53:21 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '27'
            Connection:
              schema:
                type: string
                example: keep-alive
            Server:
              schema:
                type: string
                example: nginx/1.27.2
            WWW-Authenticate:
              schema:
                type: string
                example: Token
            Allow:
              schema:
                type: string
                example: POST, OPTIONS
            X-Frame-Options:
              schema:
                type: string
                example: DENY
            Vary:
              schema:
                type: string
                example: origin
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            Referrer-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
          content:
            application/json:
              schema:
                type: object
              example:
                detail: Invalid token.
  /v1/delete/:
    delete:
      tags:
        - default
      summary: Delete Collection
      description: |-
        This endpoint is used to delete a collection.

        #### Request Body

        - `collection_id` (text) - The ID of the collection to be deleted.
            

        #### Response

        - `message` - A message indicating the result of the deletion.
            
        - `success` - Indicates whether the deletion was successful.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                collection_id:
                  type: string
                  example: '{{collection_id}}'    
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Mon, 25 Nov 2024 16:34:19 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '60'
            Connection:
              schema:
                type: string
                example: keep-alive
            Server:
              schema:
                type: string
                example: nginx/1.27.2
            Allow:
              schema:
                type: string
                example: DELETE, OPTIONS
            X-Frame-Options:
              schema:
                type: string
                example: DENY
            Vary:
              schema:
                type: string
                example: origin
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            Referrer-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
          content:
            application/json:
              schema:
                type: object
              example:
                message: Collection deleted successfully
                success: true
        '401':
          description: Unauthorized
          headers:
            Date:
              schema:
                type: string
                example: Mon, 25 Nov 2024 16:52:33 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '27'
            Connection:
              schema:
                type: string
                example: keep-alive
            Server:
              schema:
                type: string
                example: nginx/1.27.2
            WWW-Authenticate:
              schema:
                type: string
                example: Token
            Allow:
              schema:
                type: string
                example: DELETE, OPTIONS
            X-Frame-Options:
              schema:
                type: string
                example: DENY
            Vary:
              schema:
                type: string
                example: origin
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            Referrer-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
          content:
            application/json:
              schema:
                type: object
              example:
                detail: Invalid token.
        '404':
          description: Not Found
          headers:
            Date:
              schema:
                type: string
                example: Mon, 25 Nov 2024 16:34:46 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '74'
            Connection:
              schema:
                type: string
                example: keep-alive
            Server:
              schema:
                type: string
                example: nginx/1.27.2
            Allow:
              schema:
                type: string
                example: DELETE, OPTIONS
            X-Frame-Options:
              schema:
                type: string
                example: DENY
            Vary:
              schema:
                type: string
                example: origin
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            Referrer-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
          content:
            application/json:
              schema:
                type: object
              example:
                error: Collection Id [72b52a94-9dba-40eb-8018-dc425d173d00] not found

  /v1/scrape/:
    post:
      tags:
        - default
      summary: Data extraction
      description: >-


        This endpoint allows you to retrieve specific data from 
        a web page in a structured JSON format based on your predefined schema.


        #### Request Body


        - `website` (text): Website url to be scraped.
            
        - `json_schema` (text): JSON schema for the response.
            

        #### Response


        The response is a JSON object with the following properties:


        - `response`: The JSON object structured as per the provided schema.
            
        - `tokens`: The number of tokens.
            
        - `success`: Indicates the success status of the request.
            
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                website:
                  type: string
                  example: 'https://www.forbes.com/real-time-billionaires/#7583ee253d78'
                json_schema:
                  type: string
                  example: '[{"name":"<name of rich man>", "networth":"<amount worth>"}]'
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Tue, 11 Nov 2025 10:56:51 PST
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '63'
            Connection:
              schema:
                type: string
                example: keep-alive
            Server:
              schema:
                type: string
                example: nginx/1.27.2
            Allow:
              schema:
                type: string
                example: POST, OPTIONS
            X-Frame-Options:
              schema:
                type: string
                example: DENY
            Vary:
              schema:
                type: string
                example: origin
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            Referrer-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
          content:
            application/json:
              schema:
                type: object
              example:
                response: [
                    {
                        "name": "Elon Musk",
                        "networth": "$394.8 B"
                    },
                    {
                        "name": "Mark Zuckerberg",
                        "networth": "$246.3 B"
                    },
                    {
                        "name": "Jeff Bezos",
                        "networth": "$245.6 B"
                    },
                    {
                        "name": "Larry Ellison",
                        "networth": "$220.9 B"
                    },
                    {
                        "name": "Bernard Arnault & family",
                        "networth": "$182.9 B"
                    },
                    {
                        "name": "Larry Page",
                        "networth": "$154.1 B"
                    },
                    {
                        "name": "Sergey Brin",
                        "networth": "$147.2 B"
                    },
                    {
                        "name": "Warren Buffett",
                        "networth": "$147.0 B"
                    },
                    {
                        "name": "Amancio Ortega",
                        "networth": "$123.3 B"
                    },
                    {
                        "name": "Steve Ballmer",
                        "networth": "$122.3 B"
                    },
                    {
                        "name": "Rob Walton & family",
                        "networth": "$120.2 B"
                    },
                    {
                        "name": "Jim Walton & family",
                        "networth": "$118.9 B"
                    },
                    {
                        "name": "Jensen Huang",
                        "networth": "$117.4 B"
                    },
                    {
                        "name": "Michael Dell",
                        "networth": "$115.3 B"
                    },
                    {
                        "name": "Alice Walton",
                        "networth": "$111.0 B"
                    },
                    {
                        "name": "Bill Gates",
                        "networth": "$106.5 B"
                    },
                    {
                        "name": "Michael Bloomberg",
                        "networth": "$104.7 B"
                    },
                    {
                        "name": "Mukesh Ambani",
                        "networth": "$92.7 B"
                    },
                    {
                        "name": "Carlos Slim Helu & family",
                        "networth": "$79.2 B"
                    },
                    {
                        "name": "David Thomson & family",
                        "networth": "$74.6 B"
                    },
                    {
                        "name": "Julia Koch & family",
                        "networth": "$74.2 B"
                    },
                    {
                        "name": "Francoise Bettencourt Meyers & family",
                        "networth": "$73.5 B"
                    },
                    {
                        "name": "Charles Koch & family",
                        "networth": "$67.5 B"
                    },
                    {
                        "name": "Thomas Peterffy",
                        "networth": "$67.0 B"
                    },
                    {
                        "name": "Changpeng Zhao",
                        "networth": "$62.4 B"
                    }
                  ]
                tokens: 1746
                success: true
        '400':
          description: Bad Request
          headers:
            Date:
              schema:
                type: string
                example: Mon, 25 Nov 2024 16:43:29 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '45'
            Connection:
              schema:
                type: string
                example: keep-alive
            Server:
              schema:
                type: string
                example: nginx/1.27.2
            Allow:
              schema:
                type: string
                example: POST, OPTIONS
            X-Frame-Options:
              schema:
                type: string
                example: DENY
            Vary:
              schema:
                type: string
                example: origin
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            Referrer-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
          content:
            application/json:
              schema:
                type: object
              example:
                json_schema:
                  - Value must be valid JSON.
        '401':
          description: Unauthorized
          headers:
            Date:
              schema:
                type: string
                example: Mon, 25 Nov 2024 16:53:21 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '27'
            Connection:
              schema:
                type: string
                example: keep-alive
            Server:
              schema:
                type: string
                example: nginx/1.27.2
            WWW-Authenticate:
              schema:
                type: string
                example: Token
            Allow:
              schema:
                type: string
                example: POST, OPTIONS
            X-Frame-Options:
              schema:
                type: string
                example: DENY
            Vary:
              schema:
                type: string
                example: origin
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            Referrer-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
          content:
            application/json:
              schema:
                type: object
              example:
                detail: Invalid token.
  
  /v1/image-to-text/:
    post:
      tags:
        - default
      summary: Analyze Image
      description: >-


        This endpoint allows you to analyze an image and 
        ask questions about its content 


        #### Request Body


        - `image_url` (text): Image url to be analyzed.
            
        - `request_query` (text): Query been used to analyze image.
            

        #### Response


        The response is a JSON object with the following properties:


        - `response`: The result of analysis.
            
        - `tokens`: The number of tokens.
            
        - `success`: Indicates the success status of the request.
            
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image_url:
                  type: string
                  example: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTQBQcwHfud1w3RN25Wgys6Btt_Y-4mPrD2kg&s'
                request_query:
                  type: string
                  example: 'What animal is this?'
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Tue, 11 Nov 2025 10:56:51 PST
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '63'
            Connection:
              schema:
                type: string
                example: keep-alive
            Server:
              schema:
                type: string
                example: nginx/1.27.2
            Allow:
              schema:
                type: string
                example: POST, OPTIONS
            X-Frame-Options:
              schema:
                type: string
                example: DENY
            Vary:
              schema:
                type: string
                example: origin
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            Referrer-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
          content:
            application/json:
              schema:
                type: object
              example:
                response: 'This is a dog, specifically a Labrador Retriever.'
                tokens: 1746
                success: true
        '400':
          description: Bad Request
          headers:
            Date:
              schema:
                type: string
                example: Mon, 25 Nov 2024 16:43:29 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '45'
            Connection:
              schema:
                type: string
                example: keep-alive
            Server:
              schema:
                type: string
                example: nginx/1.27.2
            Allow:
              schema:
                type: string
                example: POST, OPTIONS
            X-Frame-Options:
              schema:
                type: string
                example: DENY
            Vary:
              schema:
                type: string
                example: origin
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            Referrer-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  - Make sure you are sending a valid URL
        '401':
          description: Unauthorized
          headers:
            Date:
              schema:
                type: string
                example: Mon, 25 Nov 2024 16:53:21 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '27'
            Connection:
              schema:
                type: string
                example: keep-alive
            Server:
              schema:
                type: string
                example: nginx/1.27.2
            WWW-Authenticate:
              schema:
                type: string
                example: Token
            Allow:
              schema:
                type: string
                example: POST, OPTIONS
            X-Frame-Options:
              schema:
                type: string
                example: DENY
            Vary:
              schema:
                type: string
                example: origin
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            Referrer-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
          content:
            application/json:
              schema:
                type: object
              example:
                detail: Invalid token.
  
  /v1/text-generation/:
    post:
      tags:
        - default
      summary: Generate Text
      description: >-


        generate natural language responses using open source language models


        #### Request Body


        - `messages` (JSON): Array of messages.
            
        - `model` (text): Identifier of language model to use (e.g., "llama-3.3-70b")
            

        #### Response


        The response is a JSON object with the following properties:


        - `response`: Conversational response to the query.
            
        - `tokens`: The number of tokens.
            
        - `success`: Indicates the success status of the request.
            
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                messages:
                  type: object
                  example: 
                    [{"role": "user", "content": "what is a large language model?"}]
                model:
                  type: string
                  example: 'llama-3.3-70b'
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Tue, 11 Nov 2025 10:56:51 PST
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '63'
            Connection:
              schema:
                type: string
                example: keep-alive
            Server:
              schema:
                type: string
                example: nginx/1.27.2
            Allow:
              schema:
                type: string
                example: POST, OPTIONS
            X-Frame-Options:
              schema:
                type: string
                example: DENY
            Vary:
              schema:
                type: string
                example: origin
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            Referrer-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
          content:
            application/json:
              schema:
                type: object
              example:
                response: "A large language model is a type of artificial intelligence (AI) designed to process and understand human language. It's a computer program that uses complex algorithms and statistical models to analyze and generate text, often at a scale and sophistication that rivals human language abilities.\n\nLarge language models are typically trained on vast amounts of text data, which can include books, articles, research papers, websites, and more. This training data allows the model to learn patterns, relationships, and structures within language, enabling it to:\n\n1. **Understand context**: Recognize the meaning of words, phrases, and sentences within a given context.\n2. **Generate text**: Produce coherent and natural-sounding text based on a prompt, topic, or style.\n3. **Translate language**: Convert text from one language to another.\n4. **Summarize content**: Distill long pieces of text into concise summaries.\n5. **Answer questions**: Respond to questions and provide relevant information.\n6. **Chat and converse**: Engage in natural-sounding conversations, using context and understanding to respond to questions and statements.\n\nSome key characteristics of large language models include:\n\n* **Scale**: They are trained on massive datasets, often containing billions of words or more.\n* **Depth**: They have many layers of neural networks, which allow them to capture complex patterns and relationships in language.\n* **Generative capabilities**: They can generate text that is often indistinguishable from human-written content.\n\nExamples of large language models include:\n\n* Transformer models (e.g., BERT, RoBERTa)\n* Recurrent neural network (RNN) models (e.g., LSTM, GRU)\n* Generative adversarial network (GAN) models\n\nLarge language models have many applications, such as:\n\n* **Virtual assistants**: Powering chatbots, voice assistants, and other conversational interfaces.\n* **Language translation**: Enabling accurate and efficient translation of text and speech.\n* **Text generation**: Automating content creation, such as articles, social media posts, and product descriptions.\n* **Sentiment analysis**: Analyzing text to determine sentiment, emotion, and opinion.\n\nHowever, large language models also raise important questions and concerns, such as:\n\n* **Bias and fairness**: How do we ensure that these models are fair, transparent, and free from bias?\n* **Explainability**: How can we understand and interpret the decisions made by these complex models?\n* **Security**: How can we protect against potential misuse or manipulation of these powerful models?\n\nI hope this helps! Do you have any specific questions or topics related to large language models that you'd like me to expand on?"
                tokens: 1746
                success: true
        '400':
          description: Bad Request
          headers:
            Date:
              schema:
                type: string
                example: Mon, 25 Nov 2024 16:43:29 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '45'
            Connection:
              schema:
                type: string
                example: keep-alive
            Server:
              schema:
                type: string
                example: nginx/1.27.2
            Allow:
              schema:
                type: string
                example: POST, OPTIONS
            X-Frame-Options:
              schema:
                type: string
                example: DENY
            Vary:
              schema:
                type: string
                example: origin
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            Referrer-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  - Invalid message format. Messages must be in list format.
        '401':
          description: Unauthorized
          headers:
            Date:
              schema:
                type: string
                example: Mon, 25 Nov 2024 16:53:21 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '27'
            Connection:
              schema:
                type: string
                example: keep-alive
            Server:
              schema:
                type: string
                example: nginx/1.27.2
            WWW-Authenticate:
              schema:
                type: string
                example: Token
            Allow:
              schema:
                type: string
                example: POST, OPTIONS
            X-Frame-Options:
              schema:
                type: string
                example: DENY
            Vary:
              schema:
                type: string
                example: origin
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            Referrer-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
          content:
            application/json:
              schema:
                type: object
              example:
                detail: Invalid token.
  